//
// func Fib(n) {
//   if n < 2 {
//     return 1
//   }
//   return Fib(n-1) + Fib(n-2)
// }
// return Fib(30)
//
[f]
04-fib.agora
2
0
1
0
6
[k]
sFib
i30
[i]
PUSH F 1
POP V 0
PUSH K 1
PUSH V 0
CALL A 1
DUMP S 1
RET _ 0
[f]
Fib
3
1
1
0
5
[k]
sn
i2
i1
sFib
[i]
PUSH V 0
PUSH K 1
LT _ 0
TEST J 2 // If false, jump over n instructions
PUSH K 2 // Here test was true, put 1 on stack and return
RET _ 0
PUSH V 0 // Here test was false
PUSH K 2
SUB _ 0
PUSH V 3 // Push var identified by Fib - look in parent call stack
CALL A 1 // Fib(n-1), the return value will replace the F and A
PUSH V 0
PUSH K 1
SUB _ 0
PUSH V 3
CALL A 1 // Fib(n-2)
ADD _ 0
RET _ 0
